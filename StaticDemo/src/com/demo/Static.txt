What is static keyword in java?
In Java, static is a keyword which is usually used for memory management.
The static keyword indicates that the particular member belongs to a particular class,
rather than to an instance of that class.
We can use static keyword with variables, methods, blocks and nested classes.
To create a static member, precede its declaration with the static keyword. When a member is declared as static, 
it can be accessed before any objects of its class are created,
and without reference to any object

//Java program to demonstrate  a static member 
//can be accessed before instantiating a class 
class StaticDemo {
	// static method
	static void show() {
		System.out.println("Hi you there !!");
	}

	public static void main(String[] args) {
		// calling show without creating
		// any object of class StaticDemo
		show();
	}
}

Static keyword is a non-access modifier and can be used with the follwing:
1. Static Variable
2. Static Method
3. Static Block
4. Static Class (Inner Class)

Let's get into the details of each of these following with the help of an example.

Static Variable
If you declare a variable as static then only a single copy of
that variable is created and shared among all instances of that class.

Note: We can only create static variables at class level onlyGlobally). We cannot create 
a static variable inside a static block as well as static method(including main method also).


//Java program to demonstrate  a static member variable
class StaticVariable {
	static int price;

	static {
		price = 1000; // Initialize price with some value inside a static block
	}

	static int calculate() {
		int quantity = 10; // we must initialize a local variable at the time of declaration
		return quantity * price;
	}

	public static void main(String[] args) {
		StaticVariable v = new StaticVariable();
		System.out.println(v.price); // we can access static varibale using insatance method also but
//		it is not recommended because static belongs to a particualar class
		System.out.println(StaticVariable.price); // access using class name
		int totalPrice = calculate();
		System.out.println("The total price is " + totalPrice);
	}
}

Output:
1000
1000
The total price is 10000

There are some key points which you need to remember.

What we can do with a static variable:

We can call a static variable inside a non-static method.
We can initialize it's value within a non-static method.
We can declare a local variable inside a static method but we need to intialize it.
We can initialize inside a constructor.
We can access a static variable using class name as well as instance of a class(not recommended).

What we cannot do with a static variable:
We cannot declare a static variable inside a non-static method or even within a static method.
Error: illegal start of expression
We cannot access non-static variable inside a static method.
Error: we cannot referenced a non-static variable from a static context.

Static Method
When a method is declared as static, it is known as static method.
The most common example of static method is main method if you noticed.

Have you ever wondered, why main method is declared as static?
Java main() method is always declared as static because main method 
is the starting point from where compiler starts program execution, 
and can call it without creating an object.

Methods declared as static have several restrictions:

They can only directly call other static methods.
They can only directly access static data.
They cannot refer to this or super in any way.

public class StaticMethod {
	static int a, b; // static variable

	static void test() {
		a = 10; // initialize value of a and b
		b = 20;
		System.out.println(add(a, b)); // call static add method directly
	}

	static int add(int x, int y) {
		return x + y;
	}

	public static void main(String[] args) // main is also a static method so we can directly call
	{
		test(); // calling test method
	}

}
Output: 30

Static Block
In java,it is used to initialize the static data member.
It is executed before the main method at the time of Class Loading.

public class StaticBlock {
	static int x; // static variable
	static {
		x = 5; // initialize x using static block
	}

	static void square() {
		System.out.println("Square of x is : " + x * x);
	}

	public static void main(String[] args) {
		square(); // calling square method since it's a static method
		// so we don't need a object to call it.
	}

}
Output: Square of x is : 25

Static Class
A class can be made static only if it is a nested class. This type
of classes called Nested static classes(Inner class).
The class in which a nested class is declared is called Outer Class.
Non-static nested classes are also known as Inner classes.
Note: You cannot make a top-level class with a static modifier.

package com.demo;

//Java program to demonstrate how to implement 
//static and non-static classes in a Java program. 
class OuterClass {
	static String name = "Gaurav";
	String lastName = "Rathore";

	// Static nested class
	static class NestedStaticClass {

		// Only static members of Outer class
		// is directly accessible in nested static class
		public void show() {

			System.out.println("Variable of outer class access in static inner class: " + name);
		}
	}

	// Non-static nested class also called Inner class
	public class InnerClass {

		// Both static and non-static members
		// of Outer class are accessible in this Inner class
		public void display() {
			System.out.println("Variable of outer class access in inner class: " + name + " " + lastName);
		}
	}
}

class Main {

	public static void main(String args[]) {

		// Create instance of nested Static class
		OuterClass.NestedStaticClass print = new OuterClass.NestedStaticClass();

		// Call non static method of nested static class using reference variable print
		print.show();

		// In order to create an instance of Inner class
		// we need an Outer class instance.
		OuterClass outer = new OuterClass();
		OuterClass.InnerClass inner = outer.new InnerClass();

		// Calling non-static method of Inner class
		inner.display();

		// We can also combine above steps in one step
		// to create instance of Inner class
		OuterClass.InnerClass innerObject = new OuterClass().new InnerClass();

		// Similarly we can now call Inner class method
		innerObject.display();
	}
}
Output:
Variable of outer class access in static inner class: Gaurav
Variable of outer class access in inner class: Gaurav Rathore
Variable of outer class access in inner class: Gaurav Rathore

In this article, we saw the static keyword in action.
I hope you found it informative. If you wish to learn more, you can check out our other Java Blogs as well.







